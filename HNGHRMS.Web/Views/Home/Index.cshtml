@{
    ViewBag.Title = "Báo cáo tổng hợp";
}

<h3 style="margin-left:10px">Báo cáo tổng hợp</h3>
<script type="text/javascript">
    function CompanyReportDateChanged(s, e) {
        var startDate = new Date();
        var endDate = new Date();
        startDate = CompanyReportDateEditStart.GetDate();
        endDate = CompanyReportDateEditEnd.GetDate();
        if (CheckDifference(startDate, endDate)) {
            CompanyReportCompareDateStatus.SetText("")
            CompanyEmployeeQuantityReportGridView.PerformCallback({ selectedDateStart: startDate.toLocaleDateString('vi-VN'), selectedDateEnd: endDate.toLocaleDateString('vi-VN') });
        } else {
            CompanyReportCompareDateStatus.SetText("Ngày bắt đầu không được lớn hơn ngày kết thúc !")            
        }
       
    }
    function CheckDifference(startDate,endDate)
    {
        if (startDate > endDate) {
            return false;
        } else {
            return true;
        }
    }
    function OnSalaryValueChanged(s, e) {
        if (s.GetValue()) {
            CompanySalaryChart.PerformCallback({ViewOptions : 'P'})
        } else {
            CompanySalaryChart.PerformCallback({ViewOptions: 'V' })
        }
    }
    function OnInsuranceValueChanged(s, e) {
        if (s.GetValue()) {
            CompanyInsuranceChart.PerformCallback({ ViewOptions: 'P' })
        } else {
            CompanyInsuranceChart.PerformCallback({ ViewOptions: 'V' })
        }
    }
    function OnQuantityValueChanged(s, e) {        
        if (s.GetValue()) {
            CompanyEmployeeQuantityChart.PerformCallback({ ViewOptions: 'P' })
        } else {
            CompanyEmployeeQuantityChart.PerformCallback({ ViewOptions: 'V' })
        }
    }
    function OnEmployeeQuantityTypeDateReportChanged(s, e) {
        var startDate = new Date();
        var endDate = new Date();
        if (s.name == "EmployeeQuantityTypeStartDate") {
            startDate = s.GetValue()
            endDate = EmployeeQuantityTypeEndDate.GetValue();
        } else {
            endDate = s.GetValue();
            startDate = EmployeeQuantityTypeStartDate.GetValue();
        }
        if (CheckDifference(startDate, endDate)) {           
            EmployeeQuantityTypeDateStatus.SetText("")
            EmployeesQuantityTypeByDateChart.PerformCallback({ StartDate: startDate.toLocaleDateString('vi-VN'), EndDate: endDate.toLocaleDateString('vi-VN') });
        } else {
            EmployeeQuantityTypeDateStatus.SetText("Ngày bắt đầu không được lớn hơn ngày kết thúc !")
        }
      
    }
    function OnCompanyReportChanged(s, e) {
        EmployeesQuantityTypeByCompanyChart.PerformCallback({ CompanyId: s.GetValue() });
    }
</script>

@*<div style="margin:20px 20px 20px 20px;">
    @Html.DevExpress().DateEdit(
        settings => {
            settings.Name = "CompanyReportDateEdit";
            settings.Properties.DisplayFormatString = "dd/MM/yyyy";
            settings.Properties.EditFormatString = "dd/MM/yyyy";
            settings.Date = DateTime.Now;
            settings.Width = Unit.Percentage(20);
            settings.Properties.ClientSideEvents.DateChanged = "CompanyReportDateChanged";
        }
    ).GetHtml()
</div>*@


@*<div style="margin-left:20px">
@Html.Action("CompanyReportByDate")
</div>*@

@Html.DevExpress().FormLayout(settings => {
    settings.Name = "CompanySalaryPieChart";
    settings.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
    settings.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 800;
    settings.Items.AddGroupItem(groupSettings => {
        groupSettings.Caption = "Báo cáo tổng hợp";
        groupSettings.Items.Add(item => {
            item.Name = "CompanyReportDateEditStart";
            item.Caption = "Thời điểm bắt đầu";
            item.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
            DateEditSettings dateSet = (DateEditSettings)item.NestedExtensionSettings;
            dateSet.Date = (DateTime)ViewData["StartDate"];
            dateSet.Properties.ClientSideEvents.DateChanged = "CompanyReportDateChanged";
            dateSet.Properties.DisplayFormatString = "dd/MM/yyyy";
            dateSet.Properties.EditFormatString = "dd/MM/yyyy";
            dateSet.Width = Unit.Percentage(20);
        });
        groupSettings.Items.Add(item =>
        {
            item.Name = "CompanyReportDateEditEnd";
            item.Caption = "Thời điểm kết thúc";
            item.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
            DateEditSettings dateSet = (DateEditSettings)item.NestedExtensionSettings;
            dateSet.Date = (DateTime)ViewData["EndDate"];
            dateSet.Properties.ClientSideEvents.DateChanged = "CompanyReportDateChanged";
            dateSet.Properties.DisplayFormatString = "dd/MM/yyyy";
            dateSet.Properties.EditFormatString = "dd/MM/yyyy";
            dateSet.Width = Unit.Percentage(20);
        });
        groupSettings.Items.Add(item =>
        {
            item.Name = "CompanyReportDateStatus";
            item.ShowCaption = DefaultBoolean.False;
            item.NestedExtensionType = FormLayoutNestedExtensionItemType.Label;
            LabelSettings lblSet = (LabelSettings)item.NestedExtensionSettings;
            lblSet.Properties.ClientInstanceName = "CompanyReportCompareDateStatus";
            lblSet.Style.Value = "color:red;";
            lblSet.Width = Unit.Percentage(50);
        });
        groupSettings.Items.Add(item => {
            
            item.Caption = "Báo cáo tổng hợp tình hình tuyển dụng";
            item.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
            item.SetNestedContent(() => {
                ViewContext.Writer.Write(Html.Action("CompanyEmployeeQuantityReportByDate", new { selectedDateStart = (DateTime)ViewData["StartDate"], selectedDateEnd = (DateTime)ViewData["EndDate"] }));                
            });
        });
         groupSettings.Items.Add(item =>
        {
            //item.ShowCaption = DefaultBoolean.False;
            item.Caption = "Báo cáo tổng hợp chi phí lương thực tế";
            item.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
            item.SetNestedContent(() =>
            {
                Html.RenderAction("CompanyEmployeeCostReportByDate", "Home");
            });
        });
        //groupSettings.Items.Add(item =>
        //{
        //    //item.ShowCaption = DefaultBoolean.False;
        //    item.Caption = "Báo cáo tổng hợp chi phí lương cơ bản";
        //    item.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
        //    item.SetNestedContent(() =>
        //    {
        //        ViewContext.Writer.Write(Html.Action("CompanyEmployeeSalaryReportByDate"));
        //    });
        //});
        //groupSettings.Items.Add(item =>
        //{
        //    //item.ShowCaption = DefaultBoolean.False;
        //    item.Caption = "Báo cáo tổng hợp chi phí bảo hiểm";
        //    item.CaptionSettings.Location = LayoutItemCaptionLocation.Top;
        //    item.SetNestedContent(() =>
        //    {
        //        ViewContext.Writer.Write(Html.Action("CompanyEmployeeInsuranceReportByDate"));
        //    });
        //});
    });
    if (User.IsInRole("Manager") || User.IsInRole("Admin"))
    {
        settings.Items.AddGroupItem(groupSettings =>
        {
            groupSettings.Caption = "Biểu đồ tổng quỹ lương và bảo hiểm hiện tại các công ty";
            groupSettings.Items.Add(item =>
            {
                item.Caption = "Tông quỹ lương: ";
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.Label;
                LabelSettings lblSettings = (LabelSettings)item.NestedExtensionSettings;
                lblSettings.Text = String.Format("{0:C0}", ViewData["TotalSalary"]);
            });
            groupSettings.Items.Add(item =>
            {
                item.Name = "SalaryCheckBox";
                item.Caption = "Xem theo phần trăm";
                item.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.CheckBox;
                CheckBoxSettings chBox = (CheckBoxSettings)item.NestedExtensionSettings;
                chBox.Properties.ClientSideEvents.CheckedChanged = "OnSalaryValueChanged";
            });
            groupSettings.Items.Add(item =>
            {
                item.ShowCaption = DefaultBoolean.False;
                item.SetNestedContent(() =>
                {
                    Html.RenderPartial("Charts/_CompanyTotalSalaryChart", ViewData["EmployeeTotalSalaryChart"]);
                });
            });
            groupSettings.Items.Add(item =>
            {
                item.Caption = "Tông quỹ bảo hiểm ";
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.Label;
                LabelSettings lblSettings = (LabelSettings)item.NestedExtensionSettings;
                lblSettings.Text = String.Format("{0:C0}", ViewData["TotalInsurance"]);
            });
            groupSettings.Items.Add(item =>
            {
                item.Name = "InsuranceCheckBox";
                item.Caption = "Xem theo phần trăm";
                item.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.CheckBox;
                CheckBoxSettings chBox = (CheckBoxSettings)item.NestedExtensionSettings;
                chBox.Properties.ClientSideEvents.CheckedChanged = "OnInsuranceValueChanged";
            });
            groupSettings.Items.Add(item =>
            {
                item.ShowCaption = DefaultBoolean.False;
                item.SetNestedContent(() =>
                {
                    Html.RenderPartial("Charts/_CompanyTotalInsuranceChart", ViewData["EmployeeTotalInsuranceChart"]);
                });
            });
        });
        // Employees report
        settings.Items.AddGroupItem(groupSettings =>
        {
            groupSettings.Caption = "Báo cáo tổng số nhân viên";
            groupSettings.Items.Add(item =>
            {
                item.Caption = "Tông số nhân viên: ";
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.Label;
                LabelSettings lblSettings = (LabelSettings)item.NestedExtensionSettings;
                lblSettings.Text = String.Format("{0:0,0}", ViewData["TotalEmployeeQuantity"]);

            });
            groupSettings.Items.Add(item =>
            {
                item.Name = "QuantityCheckBox";
                item.Caption = "Xem theo phần trăm";
                item.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.CheckBox;
                CheckBoxSettings chBox = (CheckBoxSettings)item.NestedExtensionSettings;
                chBox.Properties.ClientSideEvents.CheckedChanged = "OnQuantityValueChanged";
            });
            groupSettings.Items.Add(item =>
            {
                item.ShowCaption = DefaultBoolean.False;
                item.SetNestedContent(() =>
                {
                    Html.RenderPartial("Charts/_CompanyTotalEmployeeQuantityReport", ViewData["EmployeeTotalQuantityChart"]);
                });
            });
        });
        //
        settings.Items.AddGroupItem(groupSettings =>
        {
            groupSettings.Caption = "Báo cáo tình hình tuyển dụng các công ty";
            //groupSettings.ColCount = 6;
            groupSettings.Items.Add(item =>
            {
                item.Name = "EmployeeQuantityTypeStartDate";
                item.Width = 300;
                item.Caption = "Thời điểm bắt đầu";
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
                DateEditSettings dateSet = (DateEditSettings)item.NestedExtensionSettings;
                dateSet.Date = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                dateSet.Properties.DisplayFormatString = "dd/MM/yyyy";
                dateSet.Properties.ClientSideEvents.DateChanged = "OnEmployeeQuantityTypeDateReportChanged";
            });
            groupSettings.Items.Add(item =>
            {
                item.Name = "EmployeeQuantityTypeEndDate";
                item.Width = 300;
                item.Caption = "Thời điểm kết thúc";
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;
                DateEditSettings dateSet = (DateEditSettings)item.NestedExtensionSettings;
                dateSet.Date = DateTime.Now;
                dateSet.Properties.DisplayFormatString = "dd/MM/yyyy";
                dateSet.Properties.ClientSideEvents.DateChanged = "OnEmployeeQuantityTypeDateReportChanged";
            });
            groupSettings.Items.Add(item =>
            {
                item.Name = "EmployeeQuantityTypeDateStatus";
                item.ShowCaption = DefaultBoolean.False;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.Label;
                LabelSettings lblSet = (LabelSettings)item.NestedExtensionSettings;
                lblSet.Properties.ClientInstanceName = "EmployeeQuantityTypeDateStatus";
                lblSet.Style.Value = "color:red;";
                lblSet.Width = Unit.Percentage(50);
            });
            groupSettings.Items.Add(item =>
            {
                item.ShowCaption = DefaultBoolean.False;
                item.SetNestedContent(() =>
                {
                    Html.RenderPartial("Charts/_EmployeesQuantityTypeByDateChart", ViewData["EmployeeByDateChart"]);
                });
            });
        });
        //
        settings.Items.AddGroupItem(groupSettings =>
        {
            groupSettings.Caption = "Báo cáo tình hình tuyển dụng theo từng công ty";
            groupSettings.Items.Add(item =>
            {
                item.Name = "selectedComapny";
                item.Width = 300;
                item.Caption = "Công ty";
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                ComboBoxSettings cmbSet = (ComboBoxSettings)item.NestedExtensionSettings;
                cmbSet.Properties.ClientSideEvents.ValueChanged = "OnCompanyReportChanged";
                cmbSet.Properties.DataSource = ViewData["Companies"];
                cmbSet.Properties.ValueField = "id";
                cmbSet.Properties.TextField = "CompanyName";
                cmbSet.Properties.ValueType = typeof(int);
                cmbSet.SelectedIndex = 0;
            });
            groupSettings.Items.Add(item =>
            {
                item.ShowCaption = DefaultBoolean.False;
                item.SetNestedContent(() =>
                {
                    Html.RenderPartial("Charts/_EmployeesQuantityTypeByCompanyChart", ViewData["EmployeeByCompanyChart"]);
                });
            });
        });
    }

}).GetHtml()

